Na parte do pyproject incluir na versao do python 
```
python = "^3.12.*" 

```
'*' (asterisco)  ->  Ira pegar todas as versao do python 3.12


            ## nao rodar nada do curso pelo debug
# para estudo nao utilizar o debug em vez disso 
    -> Acessar o terminal 
    -> Acessar a pasta fast_zero
    -> comando para rodar a função :
        - python -i caminho-do-arquivo com  a pasta
        - chamar a função  -> read_root()


# poetry
    - poetry install na pasta que conheça pyproject.tomml -> cria venv
    - poetry add -> adicionar lib
    - poetry shell -> ativar a venv
    - python nome_past\nome arquivo -> roda arquivo 
    

# servidor 
- > para crar um servidor de desenvolvimento utilizar;
    -> fastapi dev (dentro da venv) nome_pasta/nome_arquivo

# libs para facilitar o desenvolvimetno 
-> RUFF : um linter e formatador
-> pytest : para escrevermos os teste
-> taskipy : para nao termos que lembrar todos os comandos da aplicação

# comando RUFF
-> ruff check . -> ponto para sinalizar q é o arquivo atual, comando para validar sintaxe
-> ruff format -> formata

# pytest
-> pytest : roda todos os arquivos teste
-> pytest --cov: nome da pasta 

-> coverage html : exibi uma pagina na web com as informações dos teste


# comando taskipy
escrevemos no project.toml '[tool.taskipy.tasks]' para podermos criar atalhos de 
linha comando 

retirei o 
pre_test = 'task lint'
pois nao to conseguindo executar os teste

para exengerar todos os atalhos criados utilizamos o comando:
    -> task --list

***Schemas
-> sao 'contratos' 
    ->  exemplo :
        nome: str
    -> informamos que o nome sempre vai ser uma string 

-> response_model=UserPublic
    -> estamos informando que o tipo de resposta que a chamada da função vai retornar é do tipo UserPublic
    -> fazemos isso para nao retornar um parametro de um outro schema no qual nao pode ser visivel para o usuario 
    -> exemplo senhas 

-> pydantic *Schemas
    ->EmailStr
        -> informa que o tipo do  parametro do schema é uma string de email

-> modeldump
    -> transforma um objeto de schame em um dicionario 

***geral 
-> breakpoint()
    -> adiciona um pause break na api pra quando ela for chamada


-> o pytest executa os teste por ordem alfabetica